{"version":3,"sources":["TStylesMerger.ts"],"names":["emptyProcessedPropsReg","CSSProcessedProps","mapMixedStyleRecordToCSSProcessedPropsReg","processor","styles","regStyles","key","compileStyleDeclaration","TStylesMerger","constructor","config","modelRegistry","cssProcessorConfig","CSSProcessor","classesStyles","tagsStyles","idsStyles","enableCSSInlineProcessing","enableUserAgentStyles","compileInlineCSS","inlineCSS","styleDeclaration","buildStyles","inlineStyle","parentStyles","descriptor","ownInlinePropsReg","model","tagName","getElementModelFromTagName","userTagOwnProps","userIdOwnProps","id","classes","userClassesOwnPropsList","map","c","derivedPropsFromAttributes","getUADerivedCSSProcessedPropsFromAttributes","attributes","markers","userAgentTagProps","mixedUAStyles","mergedOwnProps","merge","TStyles"],"mappings":";;;;;;;AAAA;;AAOA;;;;;;;;AAGO,MAAMA,sBAAyC,GACpD,IAAIC,+BAAJ,EADK;;;AAGP,SAASC,yCAAT,CACEC,SADF,EAEEC,MAFF,EAGqC;AACnC,MAAIC,SAA4C,GAAG,EAAnD;;AACA,OAAK,MAAMC,GAAX,IAAkBF,MAAlB,EAA0B;AACxBC,IAAAA,SAAS,CAACC,GAAD,CAAT,GAAiBH,SAAS,CAACI,uBAAV,CAAkCH,MAAM,CAACE,GAAD,CAAxC,CAAjB;AACD;;AACD,SAAOD,SAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMG,aAAN,CAAoB;AAQzBC,EAAAA,WAAW,CACTC,MADS,EAETC,aAFS,EAGTC,kBAHS,EAIT;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACA,SAAKT,SAAL,GAAiB,IAAIU,qBAAJ,CAAiBD,kBAAjB,CAAjB;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKG,aAAL,GAAqBZ,yCAAyC,CAC5D,KAAKC,SADuD,EAE5DO,MAAM,CAACI,aAFqD,CAA9D;AAIA,SAAKC,UAAL,GAAkBb,yCAAyC,CACzD,KAAKC,SADoD,EAEzDO,MAAM,CAACK,UAFkD,CAA3D;AAIA,SAAKC,SAAL,GAAiBd,yCAAyC,CACxD,KAAKC,SADmD,EAExDO,MAAM,CAACM,SAFiD,CAA1D;AAIA,SAAKC,yBAAL,GAAiCP,MAAM,CAACO,yBAAxC;AACA,SAAKC,qBAAL,GAA6BR,MAAM,CAACQ,qBAApC;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,SAAD,EAAoB;AAClC,WAAO,KAAKjB,SAAL,CAAegB,gBAAf,CAAgCC,SAAhC,CAAP;AACD;;AAEDb,EAAAA,uBAAuB,CAACc,gBAAD,EAA0C;AAC/D,WAAO,KAAKlB,SAAL,CAAeI,uBAAf,CAAuCc,gBAAvC,CAAP;AACD;;AAEDC,EAAAA,WAAW,CACTC,WADS,EAETC,YAFS,EAGTC,UAHS,EAUA;AAAA;;AACT,UAAMC,iBAAiB,GACrB,KAAKT,yBAAL,IAAkCM,WAAlC,GACI,KAAKJ,gBAAL,CAAsBI,WAAtB,CADJ,GAEI,IAHN;AAIA,UAAMI,KAAK,GAAGF,UAAU,CAACG,OAAX,GACV,KAAKjB,aAAL,CAAmBkB,0BAAnB,CAA8CJ,UAAU,CAACG,OAAzD,CADU,GAEV,IAFJ;AAGA,UAAME,eAAe,uBACnB,KAAKf,UAAL,CAAgBU,UAAU,CAACG,OAA3B,CADmB,+DAC8B,IADnD;AAEA,UAAMG,cAAc,sBAAG,KAAKf,SAAL,CAAeS,UAAU,CAACO,EAA1B,CAAH,6DAA8C,IAAlE;AACA,UAAMC,OAAO,GAAGR,UAAU,CAACQ,OAA3B;AACA,UAAMC,uBAAuB,GAAGD,OAAO,CAACE,GAAR,CAC7BC,CAAD,IAAO,KAAKtB,aAAL,CAAmBsB,CAAnB,KAAyB,IADF,CAAhC;AAGA,UAAMC,0BAA0B,GAAG,KAAKnB,qBAAL,GAC/B,CAAAS,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEW,2CAAP,CACEb,UAAU,CAACc,UADb,EAEEd,UAAU,CAACe,OAFb,MAGK,IAJ0B,GAK/B,IALJ;AAMA,UAAMC,iBAAiB,GAAG,KAAKvB,qBAAL,2BACtBS,KADsB,aACtBA,KADsB,uBACtBA,KAAK,CAAEe,aADe,uEACE,IADF,GAEtB,IAFJ,CArBS,CAwBT;;AACA,UAAMC,cAAc,GAAG3C,sBAAsB,CAAC4C,KAAvB,CACrBH,iBAAiB,IACf,KAAKtC,SAAL,CAAeI,uBAAf,CAAuCkC,iBAAvC,CAFmB,EAGrBJ,0BAA0B,IACxB,KAAKlC,SAAL,CAAeI,uBAAf,CAAuC8B,0BAAvC,CAJmB,EAKrBP,eALqB,EAMrB,GAAGI,uBANkB,EAOrBH,cAPqB,EAQrBL,iBARqB,CAAvB;AAUA,WAAO,IAAImB,gBAAJ,CAAYF,cAAZ,EAA4BnB,YAA5B,CAAP;AACD;;AArFwB","sourcesContent":["import CSSProcessor, {\n  CSSProcessedProps,\n  CSSProcessorConfig,\n  MixedStyleDeclaration\n} from '@native-html/css-processor';\nimport HTMLModelRegistry from '../model/HTMLModelRegistry';\nimport { Markers } from '../tree/tree-types';\nimport { TStyles } from './TStyles';\nimport { StylesConfig } from './types';\n\nexport const emptyProcessedPropsReg: CSSProcessedProps =\n  new CSSProcessedProps();\n\nfunction mapMixedStyleRecordToCSSProcessedPropsReg(\n  processor: CSSProcessor,\n  styles?: Record<string, MixedStyleDeclaration>\n): Record<string, CSSProcessedProps> {\n  let regStyles: Record<string, CSSProcessedProps> = {};\n  for (const key in styles) {\n    regStyles[key] = processor.compileStyleDeclaration(styles[key]);\n  }\n  return regStyles;\n}\n\n// Specificity hierarchy, in descending order:\n// 1. Inline styles\n// 2. ID (idsStyles)\n// 3. Classes (classesStyles)\n// 4. Element name (tagsStyles)\n// 5. Attribute styles (styles derived from attributes)\n// 6. Default element styles\n// 7. Inherited styles (baseFontStyles)\nexport class TStylesMerger {\n  private processor: CSSProcessor;\n  private tagsStyles: Record<string, CSSProcessedProps>;\n  private classesStyles: Record<string, CSSProcessedProps>;\n  private idsStyles: Record<string, CSSProcessedProps>;\n  private enableCSSInlineProcessing: boolean;\n  private enableUserAgentStyles: boolean;\n  private modelRegistry: HTMLModelRegistry<string>;\n  constructor(\n    config: Required<StylesConfig>,\n    modelRegistry: HTMLModelRegistry<string>,\n    cssProcessorConfig?: CSSProcessorConfig\n  ) {\n    this.processor = new CSSProcessor(cssProcessorConfig);\n    this.modelRegistry = modelRegistry;\n    this.classesStyles = mapMixedStyleRecordToCSSProcessedPropsReg(\n      this.processor,\n      config.classesStyles\n    );\n    this.tagsStyles = mapMixedStyleRecordToCSSProcessedPropsReg(\n      this.processor,\n      config.tagsStyles\n    );\n    this.idsStyles = mapMixedStyleRecordToCSSProcessedPropsReg(\n      this.processor,\n      config.idsStyles\n    );\n    this.enableCSSInlineProcessing = config.enableCSSInlineProcessing;\n    this.enableUserAgentStyles = config.enableUserAgentStyles;\n  }\n\n  compileInlineCSS(inlineCSS: string) {\n    return this.processor.compileInlineCSS(inlineCSS);\n  }\n\n  compileStyleDeclaration(styleDeclaration: MixedStyleDeclaration) {\n    return this.processor.compileStyleDeclaration(styleDeclaration);\n  }\n\n  buildStyles(\n    inlineStyle: string,\n    parentStyles: TStyles | null,\n    descriptor: {\n      tagName: string | null;\n      classes: string[];\n      id: string | null;\n      attributes: Record<string, string>;\n      markers: Markers;\n    }\n  ): TStyles {\n    const ownInlinePropsReg =\n      this.enableCSSInlineProcessing && inlineStyle\n        ? this.compileInlineCSS(inlineStyle)\n        : null;\n    const model = descriptor.tagName\n      ? this.modelRegistry.getElementModelFromTagName(descriptor.tagName)\n      : null;\n    const userTagOwnProps =\n      this.tagsStyles[descriptor.tagName as string] ?? null;\n    const userIdOwnProps = this.idsStyles[descriptor.id as string] ?? null;\n    const classes = descriptor.classes;\n    const userClassesOwnPropsList = classes.map(\n      (c) => this.classesStyles[c] || null\n    );\n    const derivedPropsFromAttributes = this.enableUserAgentStyles\n      ? model?.getUADerivedCSSProcessedPropsFromAttributes(\n          descriptor.attributes,\n          descriptor.markers\n        ) || null\n      : null;\n    const userAgentTagProps = this.enableUserAgentStyles\n      ? model?.mixedUAStyles ?? null\n      : null;\n    // Latest properties will override former properties.\n    const mergedOwnProps = emptyProcessedPropsReg.merge(\n      userAgentTagProps &&\n        this.processor.compileStyleDeclaration(userAgentTagProps),\n      derivedPropsFromAttributes &&\n        this.processor.compileStyleDeclaration(derivedPropsFromAttributes),\n      userTagOwnProps,\n      ...userClassesOwnPropsList,\n      userIdOwnProps,\n      ownInlinePropsReg\n    );\n    return new TStyles(mergedOwnProps, parentStyles);\n  }\n}\n"]}