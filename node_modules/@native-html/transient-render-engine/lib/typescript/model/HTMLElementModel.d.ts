import { MixedStyleDeclaration } from '@native-html/css-processor';
import { Markers, SetMarkersForTNode } from '../tree/tree-types';
import HTMLContentModel from './HTMLContentModel';
import { CustomElementModel, ElementCategory, ElementModelBase, NativeElementModel, TagName } from './model-types';
/**
 * An object to specify custom tags.
 *
 * @typeParam T - The name of the tag to which the model will apply.
 * @typeParam M - The {@link HTMLContentModel} associated with this tag.
 */
export interface HTMLElementModelProperties<T extends string, M extends HTMLContentModel> extends ElementModelBase<T> {
    /**
     * The {@link HTMLContentModel} attached to this model.
     */
    readonly contentModel: M;
    /**
     * `true` when the associated tag is a {@link https://html.spec.whatwg.org/multipage/syntax.html#void-elements | void element}.
     *
     * @remarks
     *
     * - Void elements cannot have children.
     * - TText-translated void elements will be preserved even though they don't
     *   have children.
     */
    readonly isVoid: boolean;
}
/**
 * An object defining engine internals for tags, such as default styles
 * (UAStyles), content model (how this tag is treated during hoisting)... etc.
 *
 * @typeParam T - The name of the tag to which the model will apply.
 * @typeParam M - The {@link HTMLContentModel} associated with this tag.
 */
export default class HTMLElementModel<T extends string, M extends HTMLContentModel> implements HTMLElementModelProperties<T, M> {
    /**
     * The tag name associated with this model.
     */
    readonly tagName: T;
    /**
     * The {@link HTMLContentModel} attached to this model.
     */
    readonly contentModel: M;
    /**
     * An opaque element translated {@link TNode} will have no translated {@link TNode}
     * children.
     */
    readonly isOpaque: boolean;
    /**
     * `true` when the associated tag is a {@link https://html.spec.whatwg.org/multipage/syntax.html#void-elements | void element}.
     *
     * @remarks
     *
     * - Void elements cannot have children.
     * - TText-translated void elements will be preserved even though they don't
     *   have children.
     */
    readonly isVoid: boolean;
    /**
     * Equivalent of "user-agent" styles. The default styles for the element.
     *
     * @remarks These styles will be merged over by `tagsStyles`.
     */
    readonly mixedUAStyles?: MixedStyleDeclaration;
    /**
     * A function to create conditional "user-agent" styles.
     *
     * @remarks For example, &lt;a&gt; tags will have underline decoration and be
     * colored blue only when `href` is defined.
     */
    readonly getUADerivedStyleFromAttributes: NativeElementModel['getUADerivedStyleFromAttributes'];
    /**
     * Derive markers for one TNode.
     */
    readonly setMarkersForTNode?: SetMarkersForTNode;
    private constructor();
    /**
     * Create an {@link HTMLElementModel} from a custom description.
     *
     * @param customElementModel - The custom model declaration.
     */
    static fromCustomModel<CustomTags extends string, ContentModel extends HTMLContentModel>(customElementModel: CustomElementModel<Exclude<CustomTags, TagName>, ContentModel>): HTMLElementModel<Exclude<CustomTags, TagName>, ContentModel>;
    /**
     * Create an {@link HTMLElementModel} from a native description.
     *
     * @param nativeElementModel - The native model declaration.
     */
    static fromNativeModel<TN extends TagName, E extends ElementCategory>(nativeElementModel: NativeElementModel<TN, E>): HTMLElementModel<TN, E extends "anchor" | "edits" ? HTMLContentModel.mixed : E extends "tabular" | "sectioning" | "grouping" ? HTMLContentModel.block : E extends "textual" ? HTMLContentModel.textual : HTMLContentModel.none>;
    isTranslatableBlock(): boolean;
    isTranslatableTextual(): boolean;
    /**
     * Create a new {@link HTMLElementModel} by merging properties into this model.
     *
     * @param properties - The {@link HTMLElementModelProperties} to merge into this model.
     * @typeParam CM - The {@link HTMLContentModel} attached to the new model.
     */
    extend<CM extends HTMLContentModel>(properties: Partial<HTMLElementModelProperties<T, CM>>): HTMLElementModel<T, CM>;
    /**
     * A function to create conditional "user-agent" styles.
     *
     * @remarks For example, &lt;a&gt; tags will have underline decoration and be
     * colored blue only when `href` is defined.
     */
    getUADerivedCSSProcessedPropsFromAttributes(attributes: Record<string, string>, markers: Markers): MixedStyleDeclaration | null;
}
