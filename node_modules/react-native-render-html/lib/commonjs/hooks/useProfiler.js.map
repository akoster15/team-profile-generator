{"version":3,"sources":["useProfiler.ts"],"names":["useProfiler","__DEV__","name","prop","lastUpdate","profile","onUpdate","now","performance","diff","current","console","warn","toFixed","identity"],"mappings":";;;;;;;AAAA;;AACA;;;;AAIA,MAAMA,WAAW,GAAGC,OAAO,GACvB,SAASD,WAAT,CAAqB;AAAEE,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAArB,EAAuE;AACrE,QAAMC,UAAU,GAAG,mBAAO,CAAP,CAAnB;AACA,QAAMC,OAAO,GAAG,wBACd,SAASC,QAAT,GAAoB;AAClB,UAAMC,GAAG,GAAGC,WAAW,CAACD,GAAZ,EAAZ;AACA,UAAME,IAAI,GAAGF,GAAG,GAAGH,UAAU,CAACM,OAA9B;;AACA,QAAID,IAAI,GAAG,EAAX,EAAe;AACbE,MAAAA,OAAO,CAACC,IAAR,CACG,sBACCT,IAAI,GAAI,OAAMA,IAAK,UAAf,GAA2B,OAChC,YACCD,IAAI,GAAGA,IAAH,GAAU,YACf,wFAAuFO,IAAI,CAACI,OAAL,CACtF,CADsF,CAEtF,+MAPJ;AASD;;AACDT,IAAAA,UAAU,CAACM,OAAX,GAAqBH,GAArB;AACD,GAhBa,EAiBd,CAACL,IAAD,EAAOC,IAAP,CAjBc,CAAhB;AAmBA,SAAOE,OAAP;AACD,CAvBsB;AAwBvB;AACA,SAASL,WAAT,GAAuB;AACrB,SAAOc,iBAAP;AACD,CA3BL;eA6Bed,W","sourcesContent":["import { useCallback, useRef } from 'react';\nimport identity from 'ramda/src/identity';\n\ndeclare const performance: { now: () => number };\n\nconst useProfiler = __DEV__\n  ? function useProfiler({ name, prop }: { name?: string; prop?: string }) {\n      const lastUpdate = useRef(0);\n      const profile = useCallback(\n        function onUpdate() {\n          const now = performance.now();\n          const diff = now - lastUpdate.current;\n          if (diff < 60) {\n            console.warn(\n              `You seem to update ${\n                prop ? `the ${prop} prop(s)` : 'props'\n              } of the \"${\n                name ? name : 'RenderHTML'\n              }\" component in short periods of time, causing costly tree rerenders (last update was ${diff.toFixed(\n                2\n              )}ms ago). Make sure you use memoization and other techniques to prevent re-rendering. You can use React profiler to help you out, see: https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html`\n            );\n          }\n          lastUpdate.current = now;\n        },\n        [name, prop]\n      );\n      return profile;\n    }\n  : /* istanbul ignore next */\n    function useProfiler() {\n      return identity as () => void;\n    };\n\nexport default useProfiler;\n"]}