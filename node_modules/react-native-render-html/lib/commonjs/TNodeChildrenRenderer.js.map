{"version":3,"sources":["TNodeChildrenRenderer.tsx"],"names":["isCollapsible","tnode","type","useTNodeChildrenProps","propsForChildren","disableMarginCollapsing","renderChild","enableExperimentalMarginCollapsing","shouldCollapseChildren","tchildren","children","TNodeWithChildrenRenderer","props","React","createElement","TChildrenRenderer","TNodeChildrenRenderer","data","defaultProps","tchildrenRendererDefaultProps"],"mappings":";;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;AAQA,SAASA,aAAT,CAAuBC,KAAvB,EAAqC;AACnC,SAAOA,KAAK,CAACC,IAAN,KAAe,OAAf,IAA0BD,KAAK,CAACC,IAAN,KAAe,UAAhD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,qBAAT,CAA+B;AACpCF,EAAAA,KADoC;AAEpCG,EAAAA,gBAFoC;AAGpCC,EAAAA,uBAAuB,GAAG,KAHU;AAIpCC,EAAAA;AAJoC,CAA/B,EAKgD;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAyC,0CAA/C;AACA,QAAMC,sBAAsB,GAC1BD,kCAAkC,IAClC,CAACF,uBADD,IAEAL,aAAa,CAACC,KAAD,CAHf;AAIA,SAAO;AACLG,IAAAA,gBADK;AAELC,IAAAA,uBAAuB,EAAE,CAACG,sBAFrB;AAGLC,IAAAA,SAAS,EAAER,KAAK,CAACS,QAHZ;AAILJ,IAAAA;AAJK,GAAP;AAMD;;AAED,MAAMK,yBAAyB,GAAG,SAASA,yBAAT,CAChCC,KADgC,EAEhC;AACA,sBAAOC,eAAMC,aAAN,CAAoBC,0BAApB,EAAuCZ,qBAAqB,CAACS,KAAD,CAA5D,CAAP;AACD,CAJD;AAMA;AACA;AACA;;;AACA,SAASI,qBAAT,CACEJ,KADF,EAEgB;AACd,MAAIA,KAAK,CAACX,KAAN,CAAYC,IAAZ,KAAqB,MAAzB,EAAiC;AAC/B;AACA,WAAOU,KAAK,CAACX,KAAN,CAAYgB,IAAnB;AACD;;AACD,sBAAOJ,eAAMC,aAAN,CAAoBH,yBAApB,EAA+CC,KAA/C,CAAP;AACD;AAED;AACA;AACA;;;AACAI,qBAAqB,CAACE,YAAtB,GAAqCC,gDAArC;eAEeH,qB","sourcesContent":["import React, { ReactElement } from 'react';\nimport { TNode } from '@native-html/transient-render-engine';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport TChildrenRenderer, {\n  tchildrenRendererDefaultProps\n} from './TChildrenRenderer';\nimport {\n  TChildrenRendererProps,\n  TNodeChildrenRendererProps\n} from './shared-types';\n\nfunction isCollapsible(tnode: TNode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\n/**\n * A hook especially useful when one need to tamper with children in a custom\n * renderer. Should be used with {@link TChildrenRenderer}.\n *\n * @example\n * For example, a custom renderer which inserts ads in an article:\n *\n * ```tsx\n * function ArticleRenderer(props) {\n *   const { tnode, TDefaultRenderer, ...defaultRendererProps } = props;\n *   const tchildrenProps = useTNodeChildrenProps(props);\n *   const firstChildrenChunk = tnode.children.slice(0, 2);\n *   const secondChildrenChunk = tnode.children.slice(2, 4);\n *   const thirdChildrenChunk = tnode.children.slice(4, 5);\n *   return (\n *     <TDefaultRenderer tnode={tnode} {...defaultRendererProps}>\n *       <TChildrenRenderer {...tchildrenProps} tchildren={firstChildrenChunk} />\n *       {firstChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={secondChildrenChunk} />\n *       {secondChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={thirdChildrenChunk} />\n *     </TDefaultRenderer>\n *   );\n * };\n * ```\n */\nexport function useTNodeChildrenProps({\n  tnode,\n  propsForChildren,\n  disableMarginCollapsing = false,\n  renderChild\n}: TNodeChildrenRendererProps): TChildrenRendererProps {\n  const { enableExperimentalMarginCollapsing } = useSharedProps();\n  const shouldCollapseChildren =\n    enableExperimentalMarginCollapsing &&\n    !disableMarginCollapsing &&\n    isCollapsible(tnode);\n  return {\n    propsForChildren,\n    disableMarginCollapsing: !shouldCollapseChildren,\n    tchildren: tnode.children,\n    renderChild\n  };\n}\n\nconst TNodeWithChildrenRenderer = function TNodeWithChildrenRenderer(\n  props: TNodeChildrenRendererProps\n) {\n  return React.createElement(TChildrenRenderer, useTNodeChildrenProps(props));\n};\n\n/**\n * A component to render all children of a {@link TNode}.\n */\nfunction TNodeChildrenRenderer(\n  props: TNodeChildrenRendererProps\n): ReactElement {\n  if (props.tnode.type === 'text') {\n    // see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return props.tnode.data as unknown as ReactElement;\n  }\n  return React.createElement(TNodeWithChildrenRenderer, props);\n}\n\n/**\n * @ignore\n */\nTNodeChildrenRenderer.defaultProps = tchildrenRendererDefaultProps;\n\nexport default TNodeChildrenRenderer;\n"]}