{"version":3,"sources":["useIMGElementState.ts"],"names":["getImageSizeAsync","uri","headers","Promise","onsuccess","onerror","onImageDimensionsSuccess","width","height","Image","getSizeWithHeaders","getSize","useFetchedNaturalDimensions","props","source","cachedNaturalDimensions","error","flatStyle","naturalDimensions","specifiedDimensions","onError","onNaturalDimensions","hasCachedDimensions","fetchPhysicalDimensions","cancelled","then","dimensions","catch","e","useIMGElementState","alt","altColor","contentWidth","computeMaxWidth","objectFit","initialDimensions","defaultImageInitialDimensions","concreteDimensions","containerStyle"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { Image } from 'react-native';\nimport type { UseIMGElementStateProps, IMGElementState } from './img-types';\nimport useImageNaturalDimensions from './useImageNaturalDimensions';\nimport useImageConcreteDimensions from './useImageConcreteDimensions';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\nimport { ImageDimensions } from '../shared-types';\nimport { getIMGState } from './getIMGState';\n\nfunction getImageSizeAsync({\n  uri,\n  headers\n}: {\n  uri: string;\n  headers: any;\n}): Promise<ImageDimensions> {\n  return new Promise<ImageDimensions>((onsuccess, onerror) => {\n    const onImageDimensionsSuccess = (width: number, height: number) =>\n      onsuccess({ width, height });\n    if (headers) {\n      Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\n\nfunction useFetchedNaturalDimensions(props: UseIMGElementStateProps) {\n  const { source, cachedNaturalDimensions } = props;\n  const {\n    error,\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    onError,\n    onNaturalDimensions\n  } = useImageNaturalDimensions(props);\n  const hasCachedDimensions = !!cachedNaturalDimensions;\n  useEffect(\n    function fetchPhysicalDimensions() {\n      let cancelled = false;\n      if (source.uri && !hasCachedDimensions) {\n        getImageSizeAsync({ uri: source.uri, headers: source.headers })\n          .then((dimensions) => !cancelled && onNaturalDimensions(dimensions))\n          .catch((e) => !cancelled && onError(e || {}));\n        return () => {\n          cancelled = true;\n        };\n      }\n    },\n    [\n      source.uri,\n      source.headers,\n      onNaturalDimensions,\n      onError,\n      hasCachedDimensions\n    ]\n  );\n  return {\n    specifiedDimensions,\n    flatStyle,\n    naturalDimensions,\n    error,\n    onError,\n    onNaturalDimensions\n  };\n}\n\n/**\n * This hook will compute concrete dimensions from image natural dimensions and\n * constraints. It will fetch the image and get its dimensions.\n *\n * @remarks If you know the dimensions beforehand, use\n * {@link useIMGElementStateWithCache} instead to save a network request and\n * prevent a layout shift.\n */\nexport default function useIMGElementState(\n  props: UseIMGElementStateProps\n): IMGElementState {\n  const {\n    alt,\n    altColor,\n    source,\n    contentWidth,\n    computeMaxWidth,\n    objectFit,\n    initialDimensions = defaultImageInitialDimensions\n  } = props;\n  const { naturalDimensions, specifiedDimensions, flatStyle, onError, error } =\n    useFetchedNaturalDimensions(props);\n  const concreteDimensions = useImageConcreteDimensions({\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    computeMaxWidth,\n    contentWidth\n  });\n  return getIMGState({\n    error,\n    alt,\n    altColor,\n    concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions,\n    objectFit,\n    onError,\n    source\n  });\n}\n"]}