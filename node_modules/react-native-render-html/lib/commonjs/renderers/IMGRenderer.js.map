{"version":3,"sources":["IMGRenderer.tsx"],"names":["useIMGElementProps","props","style","tnode","onPress","contentWidth","initialDimensions","enableExperimentalPercentWidth","computeImagesMaxWidth","src","attributes","computeMaxWidth","alt","testID","altColor","styles","nativeTextFlow","color","source","uri","width","height","objectFit","webBlockRet","IMGRenderer","React","createElement","IMGElement"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AAGA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CACLC,KADK,EAEY;AACjB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAA4BH,KAAlC;AACA,QAAMI,YAAY,GAAG,+BAArB;AACA,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MACJ,8CAAiB,KAAjB,CADF;AAEA,QAAMC,qBAAqB,GAAG,mDAAyB,KAAzB,CAA9B;AACA,QAAMC,GAAG,GAAGN,KAAK,CAACO,UAAN,CAAiBD,GAAjB,IAAwB,EAApC;AACA,SAAO;AACLJ,IAAAA,YADK;AAELM,IAAAA,eAAe,EAAEH,qBAFZ;AAGLD,IAAAA,8BAHK;AAILD,IAAAA,iBAJK;AAKLF,IAAAA,OALK;AAMLQ,IAAAA,GAAG,EAAET,KAAK,CAACO,UAAN,CAAiBE,GANjB;AAOLC,IAAAA,MAAM,EAAE,KAPH;AAQLC,IAAAA,QAAQ,EAAEX,KAAK,CAACY,MAAN,CAAaC,cAAb,CAA4BC,KARjC;AASLC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE,+BAAiBV,GAAjB;AAAP,KATH;AAULP,IAAAA,KAAK,EAAEA,KAVF;AAWLkB,IAAAA,KAAK,EAAEjB,KAAK,CAACO,UAAN,CAAiBU,KAXnB;AAYLC,IAAAA,MAAM,EAAElB,KAAK,CAACO,UAAN,CAAiBW,MAZpB;AAaLC,IAAAA,SAAS,EAAEnB,KAAK,CAACY,MAAN,CAAaQ,WAAb,CAAyBD;AAb/B,GAAP;AAeD;;AAED,MAAME,WAAkC,GAAIvB,KAAD,IAAW;AACpD,sBAAOwB,eAAMC,aAAN,CAAoBC,mBAApB,EAAgC3B,kBAAkB,CAACC,KAAD,CAAlD,CAAP;AACD,CAFD;;eAIeuB,W","sourcesContent":["import React from 'react';\nimport { TBlock } from '@native-html/transient-render-engine';\nimport IMGElement, { IMGElementProps } from '../elements/IMGElement';\nimport { InternalBlockRenderer } from '../render/render-types';\nimport { useComputeMaxWidthForTag } from '../context/SharedPropsProvider';\nimport { ImageStyle } from 'react-native';\nimport { InternalRendererProps } from '../shared-types';\nimport useNormalizedUrl from '../hooks/useNormalizedUrl';\nimport { useRendererProps } from '../context/RenderersPropsProvider';\nimport useContentWidth from '../hooks/useContentWidth';\n\n/**\n * A hook to produce props consumable by {@link IMGElement} component\n * from custom renderer props.\n */\nexport function useIMGElementProps(\n  props: InternalRendererProps<TBlock>\n): IMGElementProps {\n  const { style, tnode, onPress } = props;\n  const contentWidth = useContentWidth();\n  const { initialDimensions, enableExperimentalPercentWidth } =\n    useRendererProps('img');\n  const computeImagesMaxWidth = useComputeMaxWidthForTag('img');\n  const src = tnode.attributes.src || '';\n  return {\n    contentWidth,\n    computeMaxWidth: computeImagesMaxWidth,\n    enableExperimentalPercentWidth,\n    initialDimensions,\n    onPress,\n    alt: tnode.attributes.alt,\n    testID: 'img',\n    altColor: tnode.styles.nativeTextFlow.color as string,\n    source: { uri: useNormalizedUrl(src) },\n    style: style as ImageStyle,\n    width: tnode.attributes.width,\n    height: tnode.attributes.height,\n    objectFit: tnode.styles.webBlockRet.objectFit\n  };\n}\n\nconst IMGRenderer: InternalBlockRenderer = (props) => {\n  return React.createElement(IMGElement, useIMGElementProps(props));\n};\n\nexport default IMGRenderer;\n"]}