{"version":3,"sources":["ARenderer.tsx"],"names":["useAnchorOnLinkPress","tnode","onPress","href","attributes","normalizedHref","baseTarget","shouldHandleLinkPress","tagName","e","target","undefined","useAElementProps","props","syntheticAnchorOnLinkPress","accessibilityProps","accessible","accessibilityRole","textProps","viewProps","ARenderer","React","createElement","AElement"],"mappings":";;;;;;;;AAAA;;AAKA;;AACA;;AACA;;AACA;;;;AAEA,SAASA,oBAAT,CACEC,KADF,EAEEC,OAFF,EAGE;AACA,QAAMC,IAAY,GAAGF,KAAK,CAACG,UAAN,CAAiBD,IAAtC;AACA,QAAME,cAAc,GAAG,+BAAiBF,IAAjB,CAAvB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAiB,oDAAvB;AACA,QAAMC,qBAAqB,GACzBN,KAAK,CAACO,OAAN,KAAkB,GAAlB,IACA,OAAOH,cAAP,KAA0B,QAD1B,IAEA,OAAOH,OAAP,KAAmB,UAHrB;AAIA,SAAOK,qBAAqB,GACvBE,CAAD,IACEP,OAAO,CACLO,CADK,EAELJ,cAFK,EAGLJ,KAAK,CAACG,UAHD,EAIJH,KAAK,CAACG,UAAN,CAAiBM,MAAlB,IACEJ,UALG,CAFe,GASxBK,SATJ;AAUD;;AAEM,SAASC,gBAAT,CACLC,KADK,EAEqB;AAC1B,QAAM;AAAEZ,IAAAA;AAAF,MAAYY,KAAlB;AACA,QAAM;AAAEX,IAAAA;AAAF,MAAc,8CAAiB,GAAjB,CAApB;AACA,QAAMY,0BAA0B,GAAGd,oBAAoB,CAACC,KAAD,EAAQC,OAAR,CAAvD;;AACA,MAAI,OAAOY,0BAAP,KAAsC,UAA1C,EAAsD;AACpD,WAAOD,KAAP;AACD;;AACD,QAAME,kBAAsC,GAAG;AAC7CC,IAAAA,UAAU,EAAE,IADiC;AAE7CC,IAAAA,iBAAiB,EAAE;AAF0B,GAA/C;AAIA,SAAO,EACL,GAAGJ,KADE;AAELX,IAAAA,OAAO,EAAEY,0BAFJ;AAGLI,IAAAA,SAAS,EAAEH,kBAHN;AAILI,IAAAA,SAAS,EAAEJ;AAJN,GAAP;AAMD;;AAED,MAAMK,SAAgC,GAAIP,KAAD,IAAW;AAClD,sBAAOQ,eAAMC,aAAN,CAAoBC,iBAApB,EAA8BX,gBAAgB,CAACC,KAAD,CAA9C,CAAP;AACD,CAFD;;eAIeO,S","sourcesContent":["import React from 'react';\nimport { InternalMixedRenderer } from '../render/render-types';\nimport { TNode, DocumentContext } from '@native-html/transient-render-engine';\nimport { InternalRendererProps, RenderersProps } from '../shared-types';\nimport { AccessibilityProps, GestureResponderEvent } from 'react-native';\nimport AElement from '../elements/AElement';\nimport useNormalizedUrl from '../hooks/useNormalizedUrl';\nimport { useDocumentMetadata } from '../context/DocumentMetadataProvider';\nimport { useRendererProps } from '../context/RenderersPropsProvider';\n\nfunction useAnchorOnLinkPress(\n  tnode: TNode,\n  onPress: RenderersProps['a']['onPress']\n) {\n  const href: string = tnode.attributes.href;\n  const normalizedHref = useNormalizedUrl(href);\n  const { baseTarget } = useDocumentMetadata();\n  const shouldHandleLinkPress =\n    tnode.tagName === 'a' &&\n    typeof normalizedHref === 'string' &&\n    typeof onPress === 'function';\n  return shouldHandleLinkPress\n    ? (e: GestureResponderEvent) =>\n        onPress!(\n          e,\n          normalizedHref,\n          tnode.attributes,\n          (tnode.attributes.target as DocumentContext['baseTarget']) ||\n            baseTarget\n        )\n    : undefined;\n}\n\nexport function useAElementProps<T extends TNode>(\n  props: InternalRendererProps<T>\n): InternalRendererProps<T> {\n  const { tnode } = props;\n  const { onPress } = useRendererProps('a');\n  const syntheticAnchorOnLinkPress = useAnchorOnLinkPress(tnode, onPress);\n  if (typeof syntheticAnchorOnLinkPress !== 'function') {\n    return props;\n  }\n  const accessibilityProps: AccessibilityProps = {\n    accessible: true,\n    accessibilityRole: 'link'\n  };\n  return {\n    ...props,\n    onPress: syntheticAnchorOnLinkPress,\n    textProps: accessibilityProps,\n    viewProps: accessibilityProps\n  };\n}\n\nconst ARenderer: InternalMixedRenderer = (props) => {\n  return React.createElement(AElement, useAElementProps(props));\n};\n\nexport default ARenderer;\n"]}