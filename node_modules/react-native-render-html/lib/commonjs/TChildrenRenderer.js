"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collapseTopMarginForChild = collapseTopMarginForChild;
exports.default = exports.tchildrenRendererDefaultProps = void 0;

var _react = _interopRequireDefault(require("react"));

var _TNodeRenderer = _interopRequireDefault(require("./TNodeRenderer"));

var _getCollapsedMarginTop = _interopRequireDefault(require("./helpers/getCollapsedMarginTop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isCollapsible(tnode) {
  return tnode.type === 'block' || tnode.type === 'phrasing';
}
/**
 * Compute top collapsed margin for the nth {@link TNode}-child of a list of
 * TNodes.
 *
 * @param n - The index for which the top margin should be collapsed.
 * @param tchildren - The list of {@link TNode} children.
 * @returns `null` when no margin collapsing should apply, a number otherwise.
 * @public
 */


function collapseTopMarginForChild(n, tchildren) {
  const childTnode = tchildren[n];

  if (isCollapsible(childTnode) && n > 0 && isCollapsible(tchildren[n - 1])) {
    return (0, _getCollapsedMarginTop.default)(tchildren[n - 1], childTnode);
  }

  return null;
}

const mapCollapsibleChildren = (propsForChildren, renderChild, disableMarginCollapsing, childTnode, n, tchildren) => {
  const collapsedMarginTop = disableMarginCollapsing ? null : collapseTopMarginForChild(n, tchildren);
  const propsFromParent = { ...propsForChildren,
    collapsedMarginTop
  };
  const key = childTnode.nodeIndex;

  const childElement = /*#__PURE__*/_react.default.createElement(_TNodeRenderer.default, {
    propsFromParent,
    tnode: childTnode,
    key
  });

  return typeof renderChild === 'function' ? renderChild({
    key,
    childElement,
    index: n,
    childTnode,
    propsFromParent
  }) : childElement;
};
/**
 * A component to render collections of tnodes.
 * Especially useful when used with {@link useTNodeChildrenProps}.
 */


function TChildrenRenderer({
  tchildren,
  propsForChildren,
  disableMarginCollapsing,
  renderChild
}) {
  const elements = tchildren.map(mapCollapsibleChildren.bind(null, propsForChildren, renderChild, disableMarginCollapsing));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, elements);
}

const tchildrenRendererDefaultProps = {
  propsForChildren: {}
};
/**
 * @ignore
 */

exports.tchildrenRendererDefaultProps = tchildrenRendererDefaultProps;
TChildrenRenderer.defaultProps = tchildrenRendererDefaultProps;
var _default = TChildrenRenderer;
exports.default = _default;
//# sourceMappingURL=TChildrenRenderer.js.map