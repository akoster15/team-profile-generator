{"version":3,"sources":["TNodeRenderer.tsx"],"names":["TNodeRenderer","MemoizedTNodeRenderer","props","tnode","sharedProps","tnodeProps","type","React","createElement","TBlockRenderer","TPhrasingRenderer","TTextRenderer","__DEV__","isUnregistered","console","warn","tagName","defaultProps","propsFromParent","collapsedMarginTop"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAIA;AACA;AACA;AACA,MAAMA,aAAa,gBAAG,iBAAK,SAASC,qBAAT,CACzBC,KADyB,EAEJ;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAME,WAAW,GAAG,0CAApB;AACA,QAAMC,UAAU,GAAG,EACjB,GAAGH,KADc;AAEjBE,IAAAA;AAFiB,GAAnB;;AAIA,MAAID,KAAK,CAACG,IAAN,KAAe,OAAf,IAA0BH,KAAK,CAACG,IAAN,KAAe,UAA7C,EAAyD;AACvD,wBAAOC,eAAMC,aAAN,CAAoBC,uBAApB,EAAoCJ,UAApC,CAAP;AACD;;AACD,MAAIF,KAAK,CAACG,IAAN,KAAe,UAAnB,EAA+B;AAC7B,wBAAOC,eAAMC,aAAN,CAAoBE,0BAApB,EAAuCL,UAAvC,CAAP;AACD;;AACD,MAAIF,KAAK,CAACG,IAAN,KAAe,MAAnB,EAA2B;AACzB,wBAAOC,eAAMC,aAAN,CAAoBG,sBAApB,EAAmCN,UAAnC,CAAP;AACD;;AACD,MAAIF,KAAK,CAACG,IAAN,KAAe,OAAf,IAA0BM,OAA9B,EAAuC;AACrC,QAAIT,KAAK,CAACU,cAAV,EAA0B;AACxBC,MAAAA,OAAO,CAACC,IAAR,CACG,mDAAkDZ,KAAK,CAACa,OAAQ,0EAAjE,GACE,sIAFJ;AAID,KALD,MAKO,IAAIb,KAAK,CAACa,OAAN,KAAkB,MAAtB,EAA8B;AACnCF,MAAAA,OAAO,CAACC,IAAR,CACG,QAAOZ,KAAK,CAACa,OAAQ,uKAAtB,GACE,kFAFJ;AAID;AACF;;AACD,SAAO,IAAP;AACD,CAhCqB,CAAtB;AAkCA,MAAMC,YAAwE,GAC5E;AACEC,EAAAA,eAAe,EAAE;AACfC,IAAAA,kBAAkB,EAAE;AADL;AADnB,CADF;AAOA;;AACAnB,aAAa,CAACiB,YAAd,GAA6BA,YAA7B;eAEejB,a","sourcesContent":["import React, { memo, ReactElement } from 'react';\nimport TBlockRenderer from './TBlockRenderer';\nimport TPhrasingRenderer from './TPhrasingRenderer';\nimport TTextRenderer from './TTextRenderer';\nimport { TNodeRendererProps } from './shared-types';\nimport { useSharedProps } from './context/SharedPropsProvider';\n\nexport type { TNodeRendererProps } from './shared-types';\n\n/**\n * A component to render any {@link TNode}.\n */\nconst TNodeRenderer = memo(function MemoizedTNodeRenderer(\n  props: TNodeRendererProps<any>\n): ReactElement | null {\n  const { tnode } = props;\n  const sharedProps = useSharedProps();\n  const tnodeProps = {\n    ...props,\n    sharedProps\n  };\n  if (tnode.type === 'block' || tnode.type === 'document') {\n    return React.createElement(TBlockRenderer, tnodeProps);\n  }\n  if (tnode.type === 'phrasing') {\n    return React.createElement(TPhrasingRenderer, tnodeProps);\n  }\n  if (tnode.type === 'text') {\n    return React.createElement(TTextRenderer, tnodeProps);\n  }\n  if (tnode.type === 'empty' && __DEV__) {\n    if (tnode.isUnregistered) {\n      console.warn(\n        `There is no custom renderer registered for tag \"${tnode.tagName}\" which is not part of the HTML5 standard. The tag will not be rendered.` +\n          ' If you don\\'t want this tag to be rendered, add it to \"ignoredTags\" prop array. If you do, register a custom renderer for this tag.'\n      );\n    } else if (tnode.tagName !== 'head') {\n      console.warn(\n        `The \"${tnode.tagName}\" tag is a valid HTML element but is not handled by this library. You must register a custom renderer or plugin and make sure its content model is not set to \"none\".` +\n          ' If you don\\'t want this tag to be rendered, add it to \"ignoredTags\" prop array.'\n      );\n    }\n  }\n  return null;\n});\n\nconst defaultProps: Required<Pick<TNodeRendererProps<any>, 'propsFromParent'>> =\n  {\n    propsFromParent: {\n      collapsedMarginTop: null\n    }\n  };\n\n/* @ts-ignore*/\nTNodeRenderer.defaultProps = defaultProps;\n\nexport default TNodeRenderer;\n"]}